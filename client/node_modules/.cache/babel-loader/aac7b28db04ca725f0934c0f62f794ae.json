{"remainingRequest":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/babel-loader/lib/index.js!/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/sebastian/Code/8base/vuejs-todos-app/src/utils/graphql.js","dependencies":[{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/src/utils/graphql.js","mtime":1567789304927},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloClient } from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n/**\n * A terminating link that fetches GraphQL results from \n * a GraphQL endpoint over an http connection.\n *\n *   docs: https://www.apollographql.com/docs/link/links/http/\n *\n * The 8base workspace endpoint goes here.\n */\n\nvar httpLink = new HttpLink({\n  uri: \"https://api.8base.com/cjz1n2qrk00f901jt2utcc3m0\"\n});\n/**\n * Error Link takes a function that is called in the event of an error. \n * This function is called to do some custom logic when a GraphQL or \n * network error happens.\n * \n *   docs: https://www.apollographql.com/docs/link/links/error/\n */\n\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {\n    graphQLErrors.map(function (_ref2) {\n      var message = _ref2.message,\n          locations = _ref2.locations,\n          path = _ref2.path;\n      return console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n    });\n  }\n\n  if (networkError) console.log(\"[Network error]: \".concat(networkError));\n});\n/**\n * Takes a function that returns either an object or a promise that \n * returns an object to set the new context of a request.\n *\n *   docs: https://www.apollographql.com/docs/link/links/context/\n *  \n * Here we collect the authentication token from the auth module to \n * add required bearer token to the headers.\n */\n\nvar authLink = setContext(function (_, _ref3) {\n  var headers = _ref3.headers;\n  return {\n    headers: _objectSpread({}, headers, {\n      authorization: \"Bearer \".concat(localStorage.getItem(\"id_token\"))\n    })\n  };\n});\n/**\n * The ApolloClient class is the core API for Apollo, which we're using\n * to handle are GraphQL requests to the API.\n */\n\nexport default new ApolloClient({\n  /* Concatenate the many links */\n  link: errorLink.concat(authLink.concat(httpLink)),\n\n  /* Initialize the cache for helping performance */\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});",{"version":3,"sources":["/Users/sebastian/Code/8base/vuejs-todos-app/src/utils/graphql.js"],"names":["HttpLink","onError","ApolloClient","setContext","InMemoryCache","httpLink","uri","errorLink","graphQLErrors","networkError","map","message","locations","path","console","log","authLink","_","headers","authorization","localStorage","getItem","link","concat","cache","connectToDevTools"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA;;;;;;;;;AAQA,IAAMC,QAAQ,GAAG,IAAIL,QAAJ,CAAa;AAC5BM,EAAAA,GAAG,EAAE;AADuB,CAAb,CAAjB;AAGA;;;;;;;;AAOA,IAAMC,SAAS,GAAGN,OAAO,CAAC,gBAAqC;AAAA,MAAlCO,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAC7D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,GAAd,CAAkB;AAAA,UAAGC,OAAH,SAAGA,OAAH;AAAA,UAAYC,SAAZ,SAAYA,SAAZ;AAAA,UAAuBC,IAAvB,SAAuBA,IAAvB;AAAA,aAChBC,OAAO,CAACC,GAAR,qCAAyCJ,OAAzC,yBAA+DC,SAA/D,qBAAmFC,IAAnF,EADgB;AAAA,KAAlB;AAGD;;AAED,MAAIJ,YAAJ,EAAkBK,OAAO,CAACC,GAAR,4BAAgCN,YAAhC;AACnB,CARwB,CAAzB;AASA;;;;;;;;;;AASA,IAAMO,QAAQ,GAAGb,UAAU,CAAC,UAACc,CAAD;AAAA,MAAMC,OAAN,SAAMA,OAAN;AAAA,SAAqB;AAC/CA,IAAAA,OAAO,oBACFA,OADE;AAELC,MAAAA,aAAa,mBAAYC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAZ;AAFR;AADwC,GAArB;AAAA,CAAD,CAA3B;AAMA;;;;;AAIA,eAAe,IAAInB,YAAJ,CAAiB;AAC9B;AACAoB,EAAAA,IAAI,EAAEf,SAAS,CAACgB,MAAV,CAAiBP,QAAQ,CAACO,MAAT,CAAgBlB,QAAhB,CAAjB,CAFwB;;AAG9B;AACAmB,EAAAA,KAAK,EAAE,IAAIpB,aAAJ,EAJuB;AAK9BqB,EAAAA,iBAAiB,EAAE;AALW,CAAjB,CAAf","sourcesContent":["import { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloClient } from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n/**\n * A terminating link that fetches GraphQL results from \n * a GraphQL endpoint over an http connection.\n *\n *   docs: https://www.apollographql.com/docs/link/links/http/\n *\n * The 8base workspace endpoint goes here.\n */\nconst httpLink = new HttpLink({\n  uri: \"https://api.8base.com/cjz1n2qrk00f901jt2utcc3m0\"\n});\n/**\n * Error Link takes a function that is called in the event of an error. \n * This function is called to do some custom logic when a GraphQL or \n * network error happens.\n * \n *   docs: https://www.apollographql.com/docs/link/links/error/\n */\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message, locations, path }) =>\n      console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n    );\n  }\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n/**\n * Takes a function that returns either an object or a promise that \n * returns an object to set the new context of a request.\n *\n *   docs: https://www.apollographql.com/docs/link/links/context/\n *  \n * Here we collect the authentication token from the auth module to \n * add required bearer token to the headers.\n */\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    ...headers,\n    authorization: `Bearer ${localStorage.getItem(\"id_token\")}`\n  }\n}));\n/**\n * The ApolloClient class is the core API for Apollo, which we're using\n * to handle are GraphQL requests to the API.\n */\nexport default new ApolloClient({\n  /* Concatenate the many links */\n  link: errorLink.concat(authLink.concat(httpLink)),\n  /* Initialize the cache for helping performance */\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});\n"]}]}