{"remainingRequest":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/babel-loader/lib/index.js!/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/sebastian/Code/8base/vuejs-todos-app/src/store/modules/todo.js","dependencies":[{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/src/store/modules/todo.js","mtime":1567797227459},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport * as gql from \"@/utils/graphql\";\nimport graphqlClient from \"@/utils/api\";\nVue.use(Vuex);\n/**\n * ToDo getters.\n */\n\nexport var getters = {\n  /**\n   * Getter for retrieving boards stored in state.\n   *\n   * (See src/views/Home.vue)\n   */\n  boards: function boards(state) {\n    return state.boards;\n  }\n};\n/**\n * State maintains the applications state using Vuex.\n *\n * @typedef {boards:array[]} State\n */\n\nexport var state = {\n  boards: []\n};\n/**\n * Todo mutations.\n */\n\nexport var mutations = {\n  /**\n   * setBoards updates the Vuex state for boards.\n   */\n  setBoards: function setBoards(state, boards) {\n    state.boards = boards;\n  }\n};\n/**\n * ToDo actions.\n */\n\nexport var actions = {\n  /**\n   * fetchBoards queries the 8base API for all boards\n   * belonging to the authenticated user. The response\n   * items are committed to state.boards.\n   */\n  fetchBoards: function () {\n    var _fetchBoards = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref) {\n      var commit, response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref.commit;\n              _context.next = 3;\n              return graphqlClient.query({\n                query: gql.GET_BOARDS_QUERY,\n                fetchPolicy: \"network-only\"\n              });\n\n            case 3:\n              response = _context.sent;\n              commit(\"setBoards\", response.data.boardsList.items);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function fetchBoards(_x) {\n      return _fetchBoards.apply(this, arguments);\n    }\n\n    return fetchBoards;\n  }(),\n\n  /**\n   * addBoard sends a mutation to the 8base API for a new\n   * board belonging to the authenticated user. Afterwards,\n   * the state re-fetches the user's boards.\n   */\n  addBoard: function () {\n    var _addBoard = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(_ref2, board) {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch = _ref2.dispatch;\n              _context2.next = 3;\n              return graphqlClient.mutate({\n                mutation: gql.CREATE_BOARD_MUTATION,\n                variables: {\n                  name: board.name\n                }\n              });\n\n            case 3:\n              dispatch(\"fetchBoards\");\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function addBoard(_x2, _x3) {\n      return _addBoard.apply(this, arguments);\n    }\n\n    return addBoard;\n  }(),\n\n  /**\n   * addTodo sends a mutation to the 8base API for a new\n   * todo belonging to a given board. Afterwards,\n   * the state re-fetches the user's boards.\n   */\n  addTodo: function () {\n    var _addTodo = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3(_ref3, todo) {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch = _ref3.dispatch;\n              _context3.next = 3;\n              return graphqlClient.mutate({\n                mutation: gql.CREATE_TODO_MUTATION,\n                variables: {\n                  description: todo.description,\n                  boardId: todo.boardId\n                }\n              });\n\n            case 3:\n              dispatch(\"fetchBoards\");\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function addTodo(_x4, _x5) {\n      return _addTodo.apply(this, arguments);\n    }\n\n    return addTodo;\n  }(),\n\n  /**\n   * updateTodo sends a mutation to the 8base API to update\n   * a todo. Afterwards, the state re-fetches the user's boards.\n   */\n  updateTodoStatus: function () {\n    var _updateTodoStatus = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee4(_ref4, todo) {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              dispatch = _ref4.dispatch;\n              _context4.next = 3;\n              return graphqlClient.mutate({\n                mutation: gql.CHANGE_TODO_STATUS_MUTATION,\n                variables: {\n                  todoId: todo.todoId,\n                  status: todo.status\n                }\n              });\n\n            case 3:\n              dispatch(\"fetchBoards\");\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function updateTodoStatus(_x6, _x7) {\n      return _updateTodoStatus.apply(this, arguments);\n    }\n\n    return updateTodoStatus;\n  }(),\n\n  /**\n   * deleteTodo sends a mutation to the 8base API to delete a\n   * a todo item. Afterwards, the state re-fetches the user's boards.\n   */\n  deleteTodo: function () {\n    var _deleteTodo = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee5(_ref5, todo) {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              dispatch = _ref5.dispatch;\n              _context5.next = 3;\n              return graphqlClient.mutate({\n                mutation: gql.DELETE_TODO_MUTATION,\n                variables: {\n                  todoId: todo.todoId\n                }\n              });\n\n            case 3:\n              dispatch(\"fetchBoards\");\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    function deleteTodo(_x8, _x9) {\n      return _deleteTodo.apply(this, arguments);\n    }\n\n    return deleteTodo;\n  }(),\n\n  /**\n   * deleteBoard sends a mutation to the 8base API to delete a\n   * a todo item. Afterwards, the state re-fetches the user's boards.\n   */\n  deleteBoard: function () {\n    var _deleteBoard = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee6(_ref6, board) {\n      var dispatch;\n      return regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              dispatch = _ref6.dispatch;\n              _context6.next = 3;\n              return graphqlClient.mutate({\n                mutation: gql.DELETE_BOARD_MUTATION,\n                variables: {\n                  boardId: board.boardId\n                }\n              });\n\n            case 3:\n              dispatch(\"fetchBoards\");\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    function deleteBoard(_x10, _x11) {\n      return _deleteBoard.apply(this, arguments);\n    }\n\n    return deleteBoard;\n  }()\n};\nexport default {\n  mutations: mutations,\n  actions: actions,\n  state: state\n};",{"version":3,"sources":["/Users/sebastian/Code/8base/vuejs-todos-app/src/store/modules/todo.js"],"names":["Vue","Vuex","gql","graphqlClient","use","getters","boards","state","mutations","setBoards","actions","fetchBoards","commit","query","GET_BOARDS_QUERY","fetchPolicy","response","data","boardsList","items","addBoard","board","dispatch","mutate","mutation","CREATE_BOARD_MUTATION","variables","name","addTodo","todo","CREATE_TODO_MUTATION","description","boardId","updateTodoStatus","CHANGE_TODO_STATUS_MUTATION","todoId","status","deleteTodo","DELETE_TODO_MUTATION","deleteBoard","DELETE_BOARD_MUTATION"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nimport * as gql from \"@/utils/graphql\";\nimport graphqlClient from \"@/utils/api\";\n\nVue.use(Vuex);\n/**\n * ToDo getters.\n */\nexport const getters = {\n  /**\n   * Getter for retrieving boards stored in state.\n   *\n   * (See src/views/Home.vue)\n   */\n  boards: state => state.boards\n};\n\n/**\n * State maintains the applications state using Vuex.\n *\n * @typedef {boards:array[]} State\n */\nexport const state = {\n  boards: []\n};\n/**\n * Todo mutations.\n */\nexport const mutations = {\n  /**\n   * setBoards updates the Vuex state for boards.\n   */\n  setBoards(state, boards) {\n    state.boards = boards;\n  }\n};\n/**\n * ToDo actions.\n */\nexport const actions = {\n  /**\n   * fetchBoards queries the 8base API for all boards\n   * belonging to the authenticated user. The response\n   * items are committed to state.boards.\n   */\n  async fetchBoards({ commit }) {\n    const response = await graphqlClient.query({\n      query: gql.GET_BOARDS_QUERY,\n      fetchPolicy: \"network-only\"\n    });\n\n    commit(\"setBoards\", response.data.boardsList.items);\n  },\n  /**\n   * addBoard sends a mutation to the 8base API for a new\n   * board belonging to the authenticated user. Afterwards,\n   * the state re-fetches the user's boards.\n   */\n  async addBoard({ dispatch }, board) {\n    await graphqlClient.mutate({\n      mutation: gql.CREATE_BOARD_MUTATION,\n      variables: {\n        name: board.name\n      }\n    });\n\n    dispatch(\"fetchBoards\");\n  },\n  /**\n   * addTodo sends a mutation to the 8base API for a new\n   * todo belonging to a given board. Afterwards,\n   * the state re-fetches the user's boards.\n   */\n  async addTodo({ dispatch }, todo) {\n    await graphqlClient.mutate({\n      mutation: gql.CREATE_TODO_MUTATION,\n      variables: {\n        description: todo.description,\n        boardId: todo.boardId\n      }\n    });\n    dispatch(\"fetchBoards\");\n  },\n  /**\n   * updateTodo sends a mutation to the 8base API to update\n   * a todo. Afterwards, the state re-fetches the user's boards.\n   */\n  async updateTodoStatus({ dispatch }, todo) {\n    await graphqlClient.mutate({\n      mutation: gql.CHANGE_TODO_STATUS_MUTATION,\n      variables: {\n        todoId: todo.todoId,\n        status: todo.status\n      }\n    });\n    dispatch(\"fetchBoards\");\n  },\n  /**\n   * deleteTodo sends a mutation to the 8base API to delete a\n   * a todo item. Afterwards, the state re-fetches the user's boards.\n   */\n  async deleteTodo({ dispatch }, todo) {\n    await graphqlClient.mutate({\n      mutation: gql.DELETE_TODO_MUTATION,\n      variables: {\n        todoId: todo.todoId\n      }\n    });\n    dispatch(\"fetchBoards\");\n  },\n  /**\n   * deleteBoard sends a mutation to the 8base API to delete a\n   * a todo item. Afterwards, the state re-fetches the user's boards.\n   */\n  async deleteBoard({ dispatch }, board) {\n    await graphqlClient.mutate({\n      mutation: gql.DELETE_BOARD_MUTATION,\n      variables: {\n        boardId: board.boardId\n      }\n    });\n    dispatch(\"fetchBoards\");\n  }\n};\n\nexport default {\n  mutations,\n  actions,\n  state\n};\n"]}]}