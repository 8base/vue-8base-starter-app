{"remainingRequest":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/babel-loader/lib/index.js!/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/sebastian/Code/8base/vuejs-todos-app/src/utils/api.js","dependencies":[{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/src/utils/api.js","mtime":1567789304927},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _taggedTemplateLiteral from \"/Users/sebastian/Code/8base/vuejs-todos-app/node_modules/@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject12() {\n  var data = _taggedTemplateLiteral([\"\\n  subscription {\\n    Todos(filter: { \\n      mutation_in: [create, update, delete] \\n    }) {\\n      updatedFields\\n      node {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject12 = function _templateObject12() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject11() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation deleteTodo($todoId: ID!) {\\n    todoDelete(data: { \\n      id: $todoId \\n    }) {\\n      success\\n    }\\n  }\\n\"]);\n\n  _templateObject11 = function _templateObject11() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation changeTodoStatus($todoId: ID!, $status: String!) {\\n    todoUpdate(data: {\\n      id: $todoId\\n      status: $status \\n    }) {\\n      id\\n      description\\n      status\\n    }\\n  }\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation changeTodoDescription($todoId: ID!, $description: String!) {\\n    todoUpdate(data: { \\n      id: $todoId\\n      description: $description \\n    }) {\\n      id\\n      description\\n      status\\n    }\\n  }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createTodo($description: String!, $boardId: ID!) {\\n    todoCreate(data: { \\n      description: $description, \\n      board: { \\n        connect: { \\n          id: $boardId \\n        } \\n      } \\n    }) {\\n      id\\n      description\\n      status\\n    }\\n  }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  subscription {\\n    Board(filter: { mutation_in: [create, update, delete] }) {\\n      updatedFields\\n      node {\\n        id\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation deleteBoard($boardId: ID!) {\\n    boardDelete(data: { \\n      id: $boardId \\n    }) {\\n      success\\n    }\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation changeBoardName($boardId: ID!, $name: String!) {\\n    boardUpdate( \\n    data: {\\n      id: $boardId\\n      name: $name \\n    }) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createBoard($name: String!) {\\n    boardCreate(data: { \\n      name: $name \\n    }) {\\n      id\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  query getBoard {\\n    boardsList {\\n      items {\\n        id\\n        name\\n        todos(sort: { status: DESC }) {\\n          items {\\n            id\\n            description\\n            status\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UserSignUp($user: UserCreateInput!, $authProfileId: ID) {\\n    userSignUpWithToken(user: $user, authProfileId: $authProfileId) {\\n      id\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query CurrentUser {\\n    user {\\n      id\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from \"graphql-tag\";\n/**\n * Query the current users details.\n */\n\nexport var CURRENT_USER_QUERY = gql(_templateObject());\n/**\n * Sign up a new user mutation.\n */\n\nexport var USER_SIGN_UP_MUTATION = gql(_templateObject2());\n/**\n * Query users boards from the API.\n */\n\nexport var GET_BOARDS_QUERY = gql(_templateObject3());\n/**\n * Create a new board mutation.\n */\n\nexport var CREATE_BOARD_MUTATION = gql(_templateObject4());\n/**\n * Update a board mutation.\n */\n\nexport var UPDATE_BOARD_MUTATION = gql(_templateObject5());\n/**\n * Delete a board mutation.\n */\n\nexport var DELETE_BOARD_MUTATION = gql(_templateObject6());\n/**\n * Watch board create, update, and delete subscription.\n */\n\nexport var BOARDS_SUBSCRIPTION = gql(_templateObject7());\n/**\n * Create a todo mutation.\n */\n\nexport var CREATE_TODO_MUTATION = gql(_templateObject8());\n/**\n * Update todo description mutation.\n */\n\nexport var CHANGE_TODO_DESCRIPTION_MUTATION = gql(_templateObject9());\n/**\n * Update todo status mutation.\n */\n\nexport var CHANGE_TODO_STATUS_MUTATION = gql(_templateObject10());\n/**\n * Delete a todo mutation.\n * @type {[type]}\n */\n\nexport var DELETE_TODO_MUTATION = gql(_templateObject11());\n/**\n * Watch todo creates, updates, and deletes subscription.\n */\n\nexport var TODOS_SUBSCRIPTION = gql(_templateObject12());",{"version":3,"sources":["/Users/sebastian/Code/8base/vuejs-todos-app/src/utils/api.js"],"names":["gql","CURRENT_USER_QUERY","USER_SIGN_UP_MUTATION","GET_BOARDS_QUERY","CREATE_BOARD_MUTATION","UPDATE_BOARD_MUTATION","DELETE_BOARD_MUTATION","BOARDS_SUBSCRIPTION","CREATE_TODO_MUTATION","CHANGE_TODO_DESCRIPTION_MUTATION","CHANGE_TODO_STATUS_MUTATION","DELETE_TODO_MUTATION","TODOS_SUBSCRIPTION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA;;;;AAGA,OAAO,IAAMC,kBAAkB,GAAGD,GAAH,mBAAxB;AAQP;;;;AAGA,OAAO,IAAME,qBAAqB,GAAGF,GAAH,oBAA3B;AAQP;;;;AAGA,OAAO,IAAMG,gBAAgB,GAAGH,GAAH,oBAAtB;AAiBP;;;;AAGA,OAAO,IAAMI,qBAAqB,GAAGJ,GAAH,oBAA3B;AAUP;;;;AAGA,OAAO,IAAMK,qBAAqB,GAAGL,GAAH,oBAA3B;AAWP;;;;AAGA,OAAO,IAAMM,qBAAqB,GAAGN,GAAH,oBAA3B;AASP;;;;AAGA,OAAO,IAAMO,mBAAmB,GAAGP,GAAH,oBAAzB;AAUP;;;;AAGA,OAAO,IAAMQ,oBAAoB,GAAGR,GAAH,oBAA1B;AAgBP;;;;AAGA,OAAO,IAAMS,gCAAgC,GAAGT,GAAH,oBAAtC;AAYP;;;;AAGA,OAAO,IAAMU,2BAA2B,GAAGV,GAAH,qBAAjC;AAYP;;;;;AAIA,OAAO,IAAMW,oBAAoB,GAAGX,GAAH,qBAA1B;AASP;;;;AAGA,OAAO,IAAMY,kBAAkB,GAAGZ,GAAH,qBAAxB","sourcesContent":["import gql from \"graphql-tag\";\n/**\n * Query the current users details.\n */\nexport const CURRENT_USER_QUERY = gql`\n  query CurrentUser {\n    user {\n      id\n      email\n    }\n  }\n`;\n/**\n * Sign up a new user mutation.\n */\nexport const USER_SIGN_UP_MUTATION = gql`\n  mutation UserSignUp($user: UserCreateInput!, $authProfileId: ID) {\n    userSignUpWithToken(user: $user, authProfileId: $authProfileId) {\n      id\n      email\n    }\n  }\n`;\n/**\n * Query users boards from the API.\n */\nexport const GET_BOARDS_QUERY = gql`\n  query getBoard {\n    boardsList {\n      items {\n        id\n        name\n        todos(sort: { status: DESC }) {\n          items {\n            id\n            description\n            status\n          }\n        }\n      }\n    }\n  }\n`;\n/**\n * Create a new board mutation.\n */\nexport const CREATE_BOARD_MUTATION = gql`\n  mutation createBoard($name: String!) {\n    boardCreate(data: { \n      name: $name \n    }) {\n      id\n      name\n    }\n  }\n`;\n/**\n * Update a board mutation.\n */\nexport const UPDATE_BOARD_MUTATION = gql`\n  mutation changeBoardName($boardId: ID!, $name: String!) {\n    boardUpdate( \n    data: {\n      id: $boardId\n      name: $name \n    }) {\n      id\n    }\n  }\n`;\n/**\n * Delete a board mutation.\n */\nexport const DELETE_BOARD_MUTATION = gql`\n  mutation deleteBoard($boardId: ID!) {\n    boardDelete(data: { \n      id: $boardId \n    }) {\n      success\n    }\n  }\n`;\n/**\n * Watch board create, update, and delete subscription.\n */\nexport const BOARDS_SUBSCRIPTION = gql`\n  subscription {\n    Board(filter: { mutation_in: [create, update, delete] }) {\n      updatedFields\n      node {\n        id\n      }\n    }\n  }\n`;\n/**\n * Create a todo mutation.\n */\nexport const CREATE_TODO_MUTATION = gql`\n  mutation createTodo($description: String!, $boardId: ID!) {\n    todoCreate(data: { \n      description: $description, \n      board: { \n        connect: { \n          id: $boardId \n        } \n      } \n    }) {\n      id\n      description\n      status\n    }\n  }\n`;\n/**\n * Update todo description mutation.\n */\nexport const CHANGE_TODO_DESCRIPTION_MUTATION = gql`\n  mutation changeTodoDescription($todoId: ID!, $description: String!) {\n    todoUpdate(data: { \n      id: $todoId\n      description: $description \n    }) {\n      id\n      description\n      status\n    }\n  }\n`;\n/**\n * Update todo status mutation.\n */\nexport const CHANGE_TODO_STATUS_MUTATION = gql`\n  mutation changeTodoStatus($todoId: ID!, $status: String!) {\n    todoUpdate(data: {\n      id: $todoId\n      status: $status \n    }) {\n      id\n      description\n      status\n    }\n  }\n`;\n/**\n * Delete a todo mutation.\n * @type {[type]}\n */\nexport const DELETE_TODO_MUTATION = gql`\n  mutation deleteTodo($todoId: ID!) {\n    todoDelete(data: { \n      id: $todoId \n    }) {\n      success\n    }\n  }\n`;\n/**\n * Watch todo creates, updates, and deletes subscription.\n */\nexport const TODOS_SUBSCRIPTION = gql`\n  subscription {\n    Todos(filter: { \n      mutation_in: [create, update, delete] \n    }) {\n      updatedFields\n      node {\n        id\n      }\n    }\n  }\n`;\n"]}]}