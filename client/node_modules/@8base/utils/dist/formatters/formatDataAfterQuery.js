"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = __importStar(require("ramda"));
const selectors_1 = require("../selectors");
const verifiers_1 = require("../verifiers");
const errors_1 = require("../errors");
/**
 * Remove unnecessary data after fetch entity data by query
 * @param {string} tableName - The name of the table from the 8base API.
 * @param {Object} data - The entity data for format.
 * @param {Schema} schema - The schema of the used tables from the 8base API.
 * @param {FormatDataAfterQueryOptions} options
 */
const formatDataAfterQuery = (data, { tableName, appName, schema }, options = {}) => {
    const tableSchema = selectors_1.tablesListSelectors.getTableByName(schema, tableName, appName);
    if (!tableSchema) {
        throw new errors_1.SDKError(errors_1.ERROR_CODES.TABLE_NOT_FOUND, errors_1.PACKAGES.UTILS, `Table schema with ${tableName} name not found in schema.`);
    }
    const formatedData = R.reduce((result, fieldName) => {
        const fieldSchema = selectors_1.tableSelectors.getFieldByName(tableSchema, fieldName);
        if (!fieldSchema) {
            return result;
        }
        if ((verifiers_1.isRelationField(fieldSchema) || verifiers_1.isFileField(fieldSchema)) && verifiers_1.isListField(fieldSchema)) {
            if (data[fieldName]) {
                result[fieldName] = data[fieldName].items;
            }
        }
        else if (!verifiers_1.isMetaField(fieldSchema)) {
            result = R.assoc(fieldName, data[fieldName], result);
        }
        if (verifiers_1.isRelationField(fieldSchema) && !verifiers_1.isFileField(fieldSchema) && result[fieldName]) {
            if (options.formatRelationToIds) {
                if (verifiers_1.isListField(fieldSchema)) {
                    result = R.assoc(fieldName, result[fieldName].map && result[fieldName].map(({ id }) => id), result);
                }
                else {
                    result = R.assoc(fieldName, result[fieldName].id, result);
                }
            }
            else {
                const relationTableSchema = selectors_1.tablesListSelectors.getTableById(schema, fieldSchema.relation.refTable.id);
                if (!relationTableSchema) {
                    throw new errors_1.SDKError(errors_1.ERROR_CODES.TABLE_NOT_FOUND, errors_1.PACKAGES.UTILS, `Relation table schema with ${fieldSchema.relation.refTable.id} id not found in schema.`);
                }
                if (verifiers_1.isListField(fieldSchema)) {
                    result[fieldName] = result[fieldName].map((item) => formatDataAfterQuery(item, {
                        tableName: relationTableSchema.name,
                        schema,
                    }));
                }
                else {
                    result[fieldName] = formatDataAfterQuery(result[fieldName], {
                        tableName: relationTableSchema.name,
                        schema,
                    });
                }
            }
        }
        return result;
    }, {}, R.keys(data));
    return formatedData;
};
exports.formatDataAfterQuery = formatDataAfterQuery;
//# sourceMappingURL=formatDataAfterQuery.js.map