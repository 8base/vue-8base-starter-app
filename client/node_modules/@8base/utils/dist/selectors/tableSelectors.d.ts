import { ParametricSelector } from 'reselect';
import { TableSchema, FieldSchema } from '../types';
export declare const getTable: (table: TableSchema) => TableSchema;
export declare const getTableName: import("reselect").OutputSelector<TableSchema, string, (res: TableSchema) => string>;
export declare const getTableDisplayName: import("reselect").OutputSelector<TableSchema, string, (res: TableSchema) => string>;
export declare const getTableId: import("reselect").OutputSelector<TableSchema, string, (res: TableSchema) => string>;
export declare const getFieldById: ParametricSelector<TableSchema, string, FieldSchema | void>;
export declare const getFieldByName: ParametricSelector<TableSchema, string, FieldSchema | void>;
export declare const getFieldTypeById: ParametricSelector<TableSchema, string, any>;
export declare const getTableApplication: import("reselect").OutputSelector<TableSchema, import("../types").Application, (res: TableSchema) => import("../types").Application>;
export declare const getTableAppName: import("reselect").OutputSelector<TableSchema, unknown, (res: import("../types").Application) => unknown>;
export declare const getTableAppDisplayName: import("reselect").OutputSelector<TableSchema, unknown, (res: import("../types").Application) => unknown>;
export declare const isSystemTable: import("reselect").OutputSelector<TableSchema, boolean, (res: TableSchema) => boolean>;
export declare const isIntegrationTable: import("reselect").OutputSelector<TableSchema, boolean, (res: TableSchema) => boolean>;
export declare const isRelationField: ParametricSelector<TableSchema, string, boolean>;
export declare const isFileField: import("reselect").OutputParametricSelector<TableSchema, string, boolean, (res: "FILE") => boolean>;
export declare const isSmartField: import("reselect").OutputParametricSelector<TableSchema, string, boolean, (res: "SMART") => boolean>;
export declare const isMetaField: import("reselect").OutputParametricSelector<TableSchema, string, boolean, (res: {} | FieldSchema) => boolean>;
export declare const isListField: import("reselect").OutputParametricSelector<TableSchema, string, boolean, (res: {} | FieldSchema) => boolean>;
export declare const getFieldNameById: import("reselect").OutputParametricSelector<TableSchema, string, unknown, (res: {} | FieldSchema) => unknown>;
export declare const hasNonMetaFields: (schema?: TableSchema) => boolean;
export declare const hasListFields: (x0: TableSchema) => boolean;
export declare const hasRelationFields: (x0: TableSchema) => boolean;
export declare const hasFileFields: (x0: TableSchema) => boolean;
export declare const hasDateFields: (x0: TableSchema) => boolean;
export declare const hasSwitchFields: (x0: TableSchema) => boolean;
export declare const hasScalarFields: (x0: TableSchema) => boolean;
export declare const hasSmartFields: (x0: TableSchema) => boolean;
export declare const hasAddressFields: (x0: TableSchema) => boolean;
export declare const hasPhoneFields: (x0: TableSchema) => boolean;
export declare const getSchemaFeatures: import("reselect").OutputSelector<TableSchema, {
    create: {
        DATE: boolean;
        FILE: boolean;
        JSON: boolean;
        NUMBER: boolean;
        RELATION: boolean;
        SMART: boolean;
        SWITCH: boolean;
        TEXT: boolean;
        UUID: boolean;
    };
    update: {
        displayName: boolean;
        name: boolean;
    };
}, (res: TableSchema) => {
    create: {
        DATE: boolean;
        FILE: boolean;
        JSON: boolean;
        NUMBER: boolean;
        RELATION: boolean;
        SMART: boolean;
        SWITCH: boolean;
        TEXT: boolean;
        UUID: boolean;
    };
    update: {
        displayName: boolean;
        name: boolean;
    };
}>;
export declare const getDataFeatures: import("reselect").OutputSelector<TableSchema, {
    create: boolean;
    update: boolean;
    delete: boolean;
}, (res: TableSchema) => {
    create: boolean;
    update: boolean;
    delete: boolean;
}>;
//# sourceMappingURL=tableSelectors.d.ts.map