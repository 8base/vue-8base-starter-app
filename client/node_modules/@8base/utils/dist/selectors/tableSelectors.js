"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = __importStar(require("ramda"));
const reselect_1 = require("reselect");
const constants_1 = require("../constants");
exports.getTable = (table) => table || {};
exports.getTableName = reselect_1.createSelector(exports.getTable, R.prop('name'));
exports.getTableDisplayName = reselect_1.createSelector(exports.getTable, R.prop('displayName'));
exports.getTableId = reselect_1.createSelector(exports.getTable, R.prop('id'));
exports.getFieldById = ({ fields }, fieldId) => R.find(R.pipe(R.prop('id'), R.equals(fieldId)), fields);
exports.getFieldByName = (tableSchema, fieldName) => R.find(R.propEq('name', fieldName), tableSchema.fields);
const getFieldByIdOrEmpty = reselect_1.createSelector(exports.getFieldById, field => field || {});
exports.getFieldTypeById = reselect_1.createSelector(getFieldByIdOrEmpty, R.propOr('', 'fieldType'));
exports.getTableApplication = reselect_1.createSelector(exports.getTable, R.prop('application'));
exports.getTableAppName = reselect_1.createSelector(exports.getTableApplication, R.propOr(null, 'name'));
exports.getTableAppDisplayName = reselect_1.createSelector(exports.getTableApplication, R.propOr(null, 'displayName'));
exports.isSystemTable = reselect_1.createSelector(exports.getTable, R.propEq('isSystem', true));
exports.isIntegrationTable = reselect_1.createSelector(exports.getTable, ({ application }) => !!application);
exports.isRelationField = reselect_1.createSelector(exports.getFieldTypeById, R.equals(constants_1.FIELD_TYPE.RELATION));
exports.isFileField = reselect_1.createSelector(exports.getFieldTypeById, R.equals(constants_1.FIELD_TYPE.FILE));
exports.isSmartField = reselect_1.createSelector(exports.getFieldTypeById, R.equals(constants_1.FIELD_TYPE.SMART));
exports.isMetaField = reselect_1.createSelector(getFieldByIdOrEmpty, R.propEq('isMeta', true));
exports.isListField = reselect_1.createSelector(getFieldByIdOrEmpty, R.propEq('isList', true));
exports.getFieldNameById = reselect_1.createSelector(getFieldByIdOrEmpty, R.propOr('', 'name'));
exports.hasNonMetaFields = R.pipe(R.propOr([], 'fields'), R.any(R.propEq('isMeta', false)));
exports.hasListFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ isList }) => isList));
exports.hasRelationFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldType }) => fieldType === constants_1.FIELD_TYPE.RELATION));
exports.hasFileFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldType }) => fieldType === constants_1.FIELD_TYPE.FILE));
exports.hasDateFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldType }) => fieldType === constants_1.FIELD_TYPE.DATE));
exports.hasSwitchFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldType }) => fieldType === constants_1.FIELD_TYPE.SWITCH));
exports.hasScalarFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldType }) => fieldType === constants_1.FIELD_TYPE.TEXT || fieldType === constants_1.FIELD_TYPE.NUMBER));
exports.hasSmartFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldType }) => fieldType === constants_1.FIELD_TYPE.SMART));
exports.hasAddressFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldTypeAttributes = {} }) => fieldTypeAttributes && fieldTypeAttributes.format === constants_1.SMART_FORMATS.ADDRESS));
exports.hasPhoneFields = R.pipe(exports.getTable, ({ fields }) => !!fields.find(({ fieldTypeAttributes = {} }) => fieldTypeAttributes && fieldTypeAttributes.format === constants_1.SMART_FORMATS.PHONE));
exports.getSchemaFeatures = reselect_1.createSelector(exports.getTable, R.prop('schemaFeatures'));
exports.getDataFeatures = reselect_1.createSelector(exports.getTable, R.prop('dataFeatures'));
//# sourceMappingURL=tableSelectors.js.map