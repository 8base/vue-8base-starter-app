"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = __importStar(require("ramda"));
const schema_name_generator_1 = require("@8base/schema-name-generator");
const selectors_1 = require("../selectors");
const graphql_prettier_1 = __importDefault(require("graphql-prettier"));
const tableSelectors = __importStar(require("../selectors/tableSelectors"));
const errors_1 = require("../errors");
const createQueryString_1 = require("./createQueryString");
const upperFirst = (str) => R.toUpper(R.head(str)) + R.tail(str);
const wrapInAppName = (appName, appContentName) => (queryString) => {
    if (!appName) {
        return queryString;
    }
    return `
    ${appContentName ? `${appContentName}: ` : ''}${appName} {
      ${queryString}
    }`;
};
const getTable = (tablesList, tableId) => {
    const table = selectors_1.tablesListSelectors.getTableById(tablesList, tableId);
    if (!table) {
        throw new errors_1.SDKError(errors_1.ERROR_CODES.TABLE_NOT_FOUND, errors_1.PACKAGES.UTILS, `Table schema with ${tableId} id not found.`);
    }
    return table;
};
exports.createTableFilterGraphqlTag = (tablesList, tableId, config = {}) => {
    const table = getTable(tablesList, tableId);
    const appName = selectors_1.tablesListSelectors.getTableApplicationName(tablesList, tableId);
    const { withResultData = true } = config, restConfig = __rest(config, ["withResultData"]);
    return graphql_prettier_1.default(`
  query ${upperFirst(table.name)}TableContent(
    $filter: ${schema_name_generator_1.SchemaNameGenerator.getFilterInputTypeName(table.name, appName)}
    $orderBy: [${schema_name_generator_1.SchemaNameGenerator.getOrderByInputTypeName(table.name, appName)}]
    $after: String
    $before: String
    $first: Int
    $last: Int
    $skip: Int
  ) {
  ${wrapInAppName(appName, config.appContentName)(`
  ${config.tableContentName ? `${config.tableContentName}: ` : ''}${schema_name_generator_1.SchemaNameGenerator.getTableListFieldName(table.name)}(
      filter: $filter
      orderBy: $orderBy
      after: $after
      before: $before
      first: $first
      last: $last
      skip: $skip
    ) {
      items {
        id
        ${withResultData ? createQueryString_1.createQueryString(tablesList, table.id, Object.assign({}, restConfig)) : ''}
        _description
      }
      count
    }`)}
  }`);
};
exports.createTableRowCreateTag = (tablesList, tableId, config = {}) => {
    const table = getTable(tablesList, tableId);
    const appName = selectors_1.tablesListSelectors.getTableApplicationName(tablesList, tableId);
    const hasNonMetaFields = tableSelectors.hasNonMetaFields(table);
    const { withResultData = true } = config, restConfig = __rest(config, ["withResultData"]);
    if (hasNonMetaFields) {
        return graphql_prettier_1.default(`
  mutation ${upperFirst(table.name)}Create($data: ${schema_name_generator_1.SchemaNameGenerator.getCreateInputName(table.name, appName)}!) {
    ${wrapInAppName(appName)(`
    ${schema_name_generator_1.SchemaNameGenerator.getCreateItemFieldName(table.name)}(data: $data) {
        id
        ${withResultData ? createQueryString_1.createQueryString(tablesList, tableId, Object.assign({ withMeta: false }, restConfig)) : ''}
      }`)}
    }`);
    }
    return graphql_prettier_1.default(`
  mutation ${upperFirst(table.name)}Create {
  ${wrapInAppName(appName)(`
    ${schema_name_generator_1.SchemaNameGenerator.getCreateItemFieldName(table.name)} {
        id
        ${withResultData ? createQueryString_1.createQueryString(tablesList, tableId, Object.assign({ withMeta: false }, restConfig)) : ''}
      }`)}
    }`);
};
exports.createTableRowCreateManyTag = (tablesList, tableId) => {
    const table = getTable(tablesList, tableId);
    const appName = selectors_1.tablesListSelectors.getTableApplicationName(tablesList, tableId);
    const hasNonMetaFields = tableSelectors.hasNonMetaFields(table);
    if (hasNonMetaFields) {
        return graphql_prettier_1.default(`
  mutation ${upperFirst(table.name)}CreateMany($data: [${schema_name_generator_1.SchemaNameGenerator.getCreateManyInputName(table.name, appName)}]!) {
    ${wrapInAppName(appName)(`
      ${schema_name_generator_1.SchemaNameGenerator.getCreateManyItemFieldName(table.name)}(data: $data) {
          count
        }`)}
      }`);
    }
    return `
  mutation ${upperFirst(table.name)}CreateMany {
  ${wrapInAppName(appName)(`
  ${schema_name_generator_1.SchemaNameGenerator.getCreateManyItemFieldName(table.name)} {
      count
    }`)}
  }`;
};
exports.createTableRowUpdateTag = (tablesList, tableId, config = {}) => {
    const table = getTable(tablesList, tableId);
    const appName = selectors_1.tablesListSelectors.getTableApplicationName(tablesList, tableId);
    const { withResultData = true } = config, restConfig = __rest(config, ["withResultData"]);
    return graphql_prettier_1.default(`
    mutation ${upperFirst(table.name)}Update(
      $data: ${schema_name_generator_1.SchemaNameGenerator.getUpdateInputName(table.name, appName)}!, 
      $filter: ${schema_name_generator_1.SchemaNameGenerator.getKeyFilterInputTypeName(table.name, appName)}
    ) {
    ${wrapInAppName(appName)(`
      ${schema_name_generator_1.SchemaNameGenerator.getUpdateItemFieldName(table.name)}(data: $data, filter: $filter) {
          id
          ${withResultData ? createQueryString_1.createQueryString(tablesList, tableId, Object.assign({ withMeta: false }, restConfig)) : ''}
        }`)}
      }`);
};
exports.createTableRowQueryTag = (tablesList, tableId, config = {}) => {
    const table = getTable(tablesList, tableId);
    const appName = selectors_1.tablesListSelectors.getTableApplicationName(tablesList, tableId);
    const { withResultData = true } = config, restConfig = __rest(config, ["withResultData"]);
    return graphql_prettier_1.default(`
    query ${upperFirst(table.name)}Entity($id: ID!) {
    ${wrapInAppName(appName)(`
      ${schema_name_generator_1.SchemaNameGenerator.getTableItemFieldName(table.name)}(id: $id) {
          id
          ${withResultData ? createQueryString_1.createQueryString(tablesList, tableId, Object.assign({}, restConfig)) : ''}
        }`)}
      }`);
};
exports.createTableRowDeleteTag = (tablesList, tableId) => {
    const table = getTable(tablesList, tableId);
    const appName = selectors_1.tablesListSelectors.getTableApplicationName(tablesList, tableId);
    return graphql_prettier_1.default(`
    mutation ${upperFirst(table.name)}Delete($filter: ${schema_name_generator_1.SchemaNameGenerator.getKeyFilterInputTypeName(table.name, appName)}!, $force: Boolean) {
    ${wrapInAppName(appName)(`
      ${schema_name_generator_1.SchemaNameGenerator.getDeleteItemFieldName(table.name)}(filter: $filter, force: $force) {
          success
        }`)}
      }`);
};
//# sourceMappingURL=queryGenerators.js.map