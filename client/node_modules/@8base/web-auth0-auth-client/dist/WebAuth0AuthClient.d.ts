import * as auth0 from 'auth0-js';
import { IAuthState, IAuthClient, IStorage } from '@8base/utils';
interface IAuth0Data {
    state?: object;
    isEmailVerified: boolean;
    idToken: string;
    email: string;
    idTokenPayload: any;
}
interface IAuth0ClientOptions {
    domain: string;
    clientId: string;
    redirectUri: string;
    scope?: string;
    audience?: string;
    responseType?: string;
    responseMode?: string;
}
interface IWebAuth0AuthClientOptions extends IAuth0ClientOptions {
    logoutRedirectUri?: string;
}
/**
 * Creates instacne of the web auth0 auth client.
 */
declare class WebAuth0AuthClient implements IAuthClient {
    auth0: auth0.WebAuth;
    private logoutHasCalled;
    private logoutRedirectUri?;
    private storageAPI;
    constructor(options: IWebAuth0AuthClientOptions, storage?: IStorage, storageKey?: string);
    setState(state: IAuthState): void;
    getState(): IAuthState;
    purgeState(): void;
    checkIsAuthorized(): boolean;
    authorize(options?: object): void;
    checkSession(options?: object): Promise<IAuth0Data>;
    changePassword(): Promise<{
        email: string;
    }>;
    getAuthorizedData(): Promise<IAuth0Data>;
    logout(options?: object): void;
}
export { WebAuth0AuthClient };
//# sourceMappingURL=WebAuth0AuthClient.d.ts.map