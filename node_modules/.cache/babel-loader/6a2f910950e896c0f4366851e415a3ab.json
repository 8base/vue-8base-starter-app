{"remainingRequest":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/babel-loader/lib/index.js!/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/sebastian/Code/8base/starter-apps/vue-starter-app/src/utils/api.js","dependencies":[{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/src/utils/api.js","mtime":1568310593000},{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/cache-loader/dist/cjs.js","mtime":1568308548000},{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/babel-loader/lib/index.js","mtime":1568308548000},{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/eslint-loader/index.js","mtime":1568308548000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.map\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloClient } from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n/**\n * Import store to handle logout on expired token.\n */\n\nimport store from \"@/store\";\n/**\n * A terminating link that fetches GraphQL results from \n * a GraphQL endpoint over an http connection.\n *\n *   docs: https://www.apollographql.com/docs/link/links/http/\n *\n * The 8base workspace endpoint goes here.\n */\n\nvar httpLink = new HttpLink({\n  uri: process.env.VUE_APP_WORKSPACE_ENDPOINT\n});\n/**\n * Common error handlers.\n */\n\n/* NOTE DYLAN */\n\nvar errorHandlers = {\n  /* Logout on expired token */\n  TokenExpiredError: function TokenExpiredError() {\n    return store.dispatch('logout');\n  },\n\n  /* Invalid token supplied */\n  InvalidTokenError: function InvalidTokenError(_ref) {\n    var message = _ref.message;\n    return console.log(\"[Token error]: Message: \".concat(message));\n  },\n\n  /* Default error handler */\n  default: function _default(_ref2) {\n    var message = _ref2.message,\n        locations = _ref2.locations,\n        path = _ref2.path;\n    console.log(\"[GraphQL error]: Message: \".concat(message, \", Location: \").concat(locations, \", Path: \").concat(path));\n  }\n};\n/**\n * Error Link takes a function that is called in the event of an error. \n * This function is called to do some custom logic when a GraphQL or \n * network error happens.\n * \n *   docs: https://www.apollographql.com/docs/link/links/error/\n */\n\nvar errorLink = onError(function (_ref3) {\n  var graphQLErrors = _ref3.graphQLErrors,\n      networkError = _ref3.networkError;\n\n  if (graphQLErrors) {\n    graphQLErrors.map(function (args) {\n      return (errorHandlers[args.code] || errorHandlers.default)(args);\n    });\n  }\n\n  if (networkError) console.log(\"[Network error]: \".concat(networkError));\n});\n/**\n * Takes a function that returns either an object or a promise that \n * returns an object to set the new context of a request.\n *\n *   docs: https://www.apollographql.com/docs/link/links/context/\n *  \n * Here we collect the authentication token from the auth module to \n * add required bearer token to the headers.\n */\n\nvar authLink = setContext(function (_, _ref4) {\n  var headers = _ref4.headers;\n  return {\n    headers: _objectSpread({\n      authorization: \"Bearer \".concat(store.getters.idToken)\n    }, headers)\n  };\n});\n/**\n * The ApolloClient class is the core API for Apollo, which we're using\n * to handle are GraphQL requests to the API.\n */\n\nexport default new ApolloClient({\n  /* Concatenate the many links */\n  link: errorLink.concat(authLink.concat(httpLink)),\n\n  /* Initialize the cache for helping performance */\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});",{"version":3,"sources":["/Users/sebastian/Code/8base/starter-apps/vue-starter-app/src/utils/api.js"],"names":["HttpLink","onError","ApolloClient","setContext","InMemoryCache","store","httpLink","uri","process","env","VUE_APP_WORKSPACE_ENDPOINT","errorHandlers","TokenExpiredError","dispatch","InvalidTokenError","message","console","log","default","locations","path","errorLink","graphQLErrors","networkError","map","args","code","authLink","_","headers","authorization","getters","idToken","link","concat","cache","connectToDevTools"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA;;;;AAGA,OAAOC,KAAP,MAAkB,SAAlB;AACA;;;;;;;;;AAQA,IAAMC,QAAQ,GAAG,IAAIN,QAAJ,CAAa;AAC5BO,EAAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYC;AADW,CAAb,CAAjB;AAGA;;;;AAGA;;AACA,IAAMC,aAAa,GAAG;AACpB;AACAC,EAAAA,iBAAiB,EAAE;AAAA,WACjBP,KAAK,CAACQ,QAAN,CAAe,QAAf,CADiB;AAAA,GAFC;;AAIpB;AACAC,EAAAA,iBAAiB,EAAE;AAAA,QAAGC,OAAH,QAAGA,OAAH;AAAA,WACjBC,OAAO,CAACC,GAAR,mCAAuCF,OAAvC,EADiB;AAAA,GALC;;AAOpB;AACAG,EAAAA,OAAO,EAAE,yBAAkC;AAAA,QAA/BH,OAA+B,SAA/BA,OAA+B;AAAA,QAAtBI,SAAsB,SAAtBA,SAAsB;AAAA,QAAXC,IAAW,SAAXA,IAAW;AACzCJ,IAAAA,OAAO,CAACC,GAAR,qCAAyCF,OAAzC,yBAA+DI,SAA/D,qBAAmFC,IAAnF;AACD;AAVmB,CAAtB;AAYA;;;;;;;;AAOA,IAAMC,SAAS,GAAGpB,OAAO,CAAC,iBAAqC;AAAA,MAAlCqB,aAAkC,SAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,SAAnBA,YAAmB;;AAC7D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,GAAd,CAAkB,UAACC,IAAD;AAAA,aAAU,CAACd,aAAa,CAACc,IAAI,CAACC,IAAN,CAAb,IAA4Bf,aAAa,CAACO,OAA3C,EAAoDO,IAApD,CAAV;AAAA,KAAlB;AACD;;AAED,MAAIF,YAAJ,EAAkBP,OAAO,CAACC,GAAR,4BAAgCM,YAAhC;AACnB,CANwB,CAAzB;AAOA;;;;;;;;;;AASA,IAAMI,QAAQ,GAAGxB,UAAU,CAAC,UAACyB,CAAD;AAAA,MAAMC,OAAN,SAAMA,OAAN;AAAA,SAAqB;AAC/CA,IAAAA,OAAO;AACLC,MAAAA,aAAa,mBAAYzB,KAAK,CAAC0B,OAAN,CAAcC,OAA1B;AADR,OAEFH,OAFE;AADwC,GAArB;AAAA,CAAD,CAA3B;AAMA;;;;;AAIA,eAAe,IAAI3B,YAAJ,CAAiB;AAC9B;AACA+B,EAAAA,IAAI,EAAEZ,SAAS,CAACa,MAAV,CAAiBP,QAAQ,CAACO,MAAT,CAAgB5B,QAAhB,CAAjB,CAFwB;;AAG9B;AACA6B,EAAAA,KAAK,EAAE,IAAI/B,aAAJ,EAJuB;AAK9BgC,EAAAA,iBAAiB,EAAE;AALW,CAAjB,CAAf","sourcesContent":["import { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloClient } from \"apollo-client\";\nimport { setContext } from \"apollo-link-context\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\n/**\n * Import store to handle logout on expired token.\n */\nimport store from \"@/store\";\n/**\n * A terminating link that fetches GraphQL results from \n * a GraphQL endpoint over an http connection.\n *\n *   docs: https://www.apollographql.com/docs/link/links/http/\n *\n * The 8base workspace endpoint goes here.\n */\nconst httpLink = new HttpLink({\n  uri: process.env.VUE_APP_WORKSPACE_ENDPOINT\n});\n/**\n * Common error handlers.\n */\n/* NOTE DYLAN */\nconst errorHandlers = {\n  /* Logout on expired token */\n  TokenExpiredError: () => \n    store.dispatch('logout'),\n  /* Invalid token supplied */\n  InvalidTokenError: ({ message }) => \n    console.log(`[Token error]: Message: ${message}`),\n  /* Default error handler */\n  default: ({ message, locations, path }) => {\n    console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n  }\n};\n/**\n * Error Link takes a function that is called in the event of an error. \n * This function is called to do some custom logic when a GraphQL or \n * network error happens.\n * \n *   docs: https://www.apollographql.com/docs/link/links/error/\n */\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map((args) => (errorHandlers[args.code] || errorHandlers.default)(args));\n  }\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n/**\n * Takes a function that returns either an object or a promise that \n * returns an object to set the new context of a request.\n *\n *   docs: https://www.apollographql.com/docs/link/links/context/\n *  \n * Here we collect the authentication token from the auth module to \n * add required bearer token to the headers.\n */\nconst authLink = setContext((_, { headers }) => ({\n  headers: {\n    authorization: `Bearer ${store.getters.idToken}`,\n    ...headers\n  }\n}));\n/**\n * The ApolloClient class is the core API for Apollo, which we're using\n * to handle are GraphQL requests to the API.\n */\nexport default new ApolloClient({\n  /* Concatenate the many links */\n  link: errorLink.concat(authLink.concat(httpLink)),\n  /* Initialize the cache for helping performance */\n  cache: new InMemoryCache(),\n  connectToDevTools: true\n});\n"]}]}