{"remainingRequest":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/babel-loader/lib/index.js!/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/sebastian/Code/8base/starter-apps/vue-starter-app/src/store/modules/session.js","dependencies":[{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/src/store/modules/session.js","mtime":1568310523000},{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/cache-loader/dist/cjs.js","mtime":1568308548000},{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/babel-loader/lib/index.js","mtime":1568308548000},{"path":"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/eslint-loader/index.js","mtime":1568308548000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/sebastian/Code/8base/starter-apps/vue-starter-app/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport auth from \"@/utils/auth.js\";\nimport * as gql from \"@/utils/graphql\";\nimport graphqlClient from \"@/utils/api\";\n/**\n * State maintains the authentication state using Vuex.\n * Determines \"authenticated\" status by presence of \n * \"idToken\" in local storage while storing the \n * idTokens value returned by the auth provider.\n */\n\nvar state = {\n  authenticated: !!localStorage.getItem(\"id_token\"),\n  idToken: localStorage.getItem(\"id_token\")\n};\n/**\n * State getters for retrieving state properties.\n */\n\nvar getters = {\n  /**\n   * Getter for retrieving authenticated status.\n   */\n  authenticated: function authenticated(state) {\n    return state.authenticated;\n  },\n\n  /**\n   * Getter for retrieving ID token.\n   */\n  idToken: function idToken(state) {\n    return state.idToken;\n  }\n};\n/**\n * State mutations for setting state properties.\n */\n\nvar mutations = {\n  /**\n   * Updates the Vuex state's authentication data\n   */\n  authenticated: function authenticated(state, authData) {\n    state.authenticated = true;\n    state.idToken = authData.idToken;\n    localStorage.setItem(\"id_token\", state.idToken);\n  },\n\n  /**\n   * Cleans Vuex state's authentication data\n   */\n  logout: function logout(state) {\n    state.authenticated = false;\n    state.idToken = false;\n    localStorage.removeItem(\"id_token\");\n  }\n};\n/**\n * State actions for async and sync state related functions.\n */\n\nvar actions = {\n  /**\n   * launches Auth0 authentication\n   */\n  login: function login() {\n    auth.authorize();\n  },\n\n  /**\n   * Logs out and updates Vuex state's authentication data\n   */\n  logout: function logout(_ref) {\n    var commit = _ref.commit;\n    auth.logout();\n    commit('logout');\n  },\n\n  /**\n   * Checks if user is registered in 8base, if not signs up the user.\n   * Afterwards stores the authentication data in Vuex State. \n   * \n   * This function utilizes methods available on the auth model that is \n   * stored in utils/auth.js.\n   */\n  handleAuthentication: function () {\n    var _handleAuthentication = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref2) {\n      var commit, authResult, context;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref2.commit;\n              _context.next = 3;\n              return auth.getAuthorizedData();\n\n            case 3:\n              authResult = _context.sent;\n\n              /**\n               * Auth headers for communicating with the 8base API.\n               */\n              context = {\n                headers: {\n                  authorization: \"Bearer \".concat(authResult.idToken)\n                }\n              };\n              /**\n               * Check if user exists in 8base.\n               */\n\n              _context.prev = 5;\n              _context.next = 8;\n              return graphqlClient.query({\n                query: gql.CURRENT_USER_QUERY,\n                context: context\n              });\n\n            case 8:\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](5);\n              _context.next = 14;\n              return graphqlClient.mutate({\n                mutation: gql.USER_SIGN_UP_MUTATION,\n                variables: {\n                  user: {\n                    email: authResult.email\n                  },\n                  authProfileId: process.env.VUE_APP_AUTH_PROFILE_ID\n                },\n                context: context\n              });\n\n            case 14:\n              /* commit the auth data to state */\n              commit(\"authenticated\", authResult);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 10]]);\n    }));\n\n    function handleAuthentication(_x) {\n      return _handleAuthentication.apply(this, arguments);\n    }\n\n    return handleAuthentication;\n  }()\n};\nexport default {\n  state: state,\n  getters: getters,\n  mutations: mutations,\n  actions: actions\n};",{"version":3,"sources":["/Users/sebastian/Code/8base/starter-apps/vue-starter-app/src/store/modules/session.js"],"names":["auth","gql","graphqlClient","state","authenticated","localStorage","getItem","idToken","getters","mutations","authData","setItem","logout","removeItem","actions","login","authorize","commit","handleAuthentication","getAuthorizedData","authResult","context","headers","authorization","query","CURRENT_USER_QUERY","mutate","mutation","USER_SIGN_UP_MUTATION","variables","user","email","authProfileId","process","env","VUE_APP_AUTH_PROFILE_ID"],"mappings":"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","sourcesContent":["import auth from \"@/utils/auth.js\";\nimport * as gql from \"@/utils/graphql\"; \nimport graphqlClient from \"@/utils/api\"; \n/**\n * State maintains the authentication state using Vuex.\n * Determines \"authenticated\" status by presence of \n * \"idToken\" in local storage while storing the \n * idTokens value returned by the auth provider.\n */\nconst state = {\n  authenticated: !!localStorage.getItem(\"id_token\"),\n  idToken: localStorage.getItem(\"id_token\")\n};\n/**\n * State getters for retrieving state properties.\n */\nconst getters = {\n  /**\n   * Getter for retrieving authenticated status.\n   */\n  authenticated(state) {\n    return state.authenticated;\n  },\n  /**\n   * Getter for retrieving ID token.\n   */\n  idToken(state) {\n    return state.idToken;\n  }  \n};\n/**\n * State mutations for setting state properties.\n */\nconst mutations = {\n  /**\n   * Updates the Vuex state's authentication data\n   */\n  authenticated(state, authData) {\n    state.authenticated = true;\n    state.idToken = authData.idToken;\n\n    localStorage.setItem(\"id_token\", state.idToken);\n  },\n  /**\n   * Cleans Vuex state's authentication data\n   */\n  logout(state) {\n    state.authenticated = false;\n    state.idToken = false;\n\n    localStorage.removeItem(\"id_token\");\n  }\n};\n/**\n * State actions for async and sync state related functions.\n */\nconst actions = {\n  /**\n   * launches Auth0 authentication\n   */\n  login() {\n    auth.authorize();\n  },\n  /**\n   * Logs out and updates Vuex state's authentication data\n   */\n  logout({ commit }) {\n    auth.logout();\n\n    commit('logout');\n  },\n  /**\n   * Checks if user is registered in 8base, if not signs up the user.\n   * Afterwards stores the authentication data in Vuex State. \n   * \n   * This function utilizes methods available on the auth model that is \n   * stored in utils/auth.js.\n   */\n  async handleAuthentication({ commit }) {\n    const authResult = await auth.getAuthorizedData();\n    /**\n     * Auth headers for communicating with the 8base API.\n     */\n    const context = {\n      headers: { \n        authorization: `Bearer ${authResult.idToken}` \n      }\n    };\n    /**\n     * Check if user exists in 8base.\n     */\n    try {\n      await graphqlClient.query({\n        query: gql.CURRENT_USER_QUERY,\n        context\n      });\n    }\n    /**\n     * If user doesn't exist, an error will be\n     * thrown, which then the new user can be\n     * created using the authResult values.\n     */\n    catch {\n      await graphqlClient.mutate({\n        mutation: gql.USER_SIGN_UP_MUTATION,\n        variables: {\n          user: { email: authResult.email },\n          authProfileId: process.env.VUE_APP_AUTH_PROFILE_ID\n        },\n        context\n      });\n    }\n    /* commit the auth data to state */\n    commit(\"authenticated\", authResult);\n  }\n};\n\nexport default {\n  state,\n  getters,\n  mutations,\n  actions\n};\n"]}]}