"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = __importStar(require("ramda"));
const verifiers_1 = require("../verifiers");
const selectors_1 = require("../selectors");
const constants_1 = require("../constants");
const formatDataForMutation_1 = require("./formatDataForMutation");
const errors_1 = require("../errors");
exports.formatFieldDataListItem = (type, data, { fieldSchema, schema }) => {
    let nextData = data;
    if (R.isNil(nextData)) {
        return {
            data: {},
            type: type === constants_1.MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
        };
    }
    else if (typeof nextData === 'string') {
        return {
            data: { id: nextData },
            type: type === constants_1.MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
        };
    }
    else if (typeof nextData.id === 'string') {
        return {
            data: { id: nextData.id },
            type: type === constants_1.MUTATION_TYPE.CREATE ? 'connect' : 'reconnect',
        };
    }
    if (verifiers_1.isRelationField(fieldSchema)) {
        const relationTableSchema = selectors_1.tablesListSelectors.getTableById(schema, fieldSchema.relation.refTable.id);
        if (!relationTableSchema) {
            throw new errors_1.SDKError(errors_1.ERROR_CODES.TABLE_NOT_FOUND, errors_1.PACKAGES.UTILS, `Relation table schema with ${fieldSchema.relation.refTable.id} id not found in schema.`);
        }
        nextData = formatDataForMutation_1.formatDataForMutation(constants_1.MUTATION_TYPE.CREATE, nextData, {
            tableName: relationTableSchema.name,
            schema,
        });
    }
    if (verifiers_1.isFileField(fieldSchema)) {
        nextData = formatDataForMutation_1.formatDataForMutation(constants_1.MUTATION_TYPE.CREATE, nextData, {
            tableName: constants_1.SYSTEM_TABLES.FILES,
            schema,
        });
    }
    return {
        data: nextData,
        type: 'create',
    };
};
//# sourceMappingURL=formatFieldDataListItem.js.map