"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = __importStar(require("ramda"));
const verifiers = __importStar(require("../verifiers"));
const formatFieldDataList_1 = require("./formatFieldDataList");
const formatFieldData_1 = require("./formatFieldData");
const formatJSON = (data) => {
    if (typeof data === 'string' && data.length === 0) {
        return null;
    }
    return JSON.parse(data);
};
const formatFieldDataForMutation = (type, data, { fieldSchema, schema }) => {
    let nextData = data;
    if (verifiers.isFileField(fieldSchema) || verifiers.isRelationField(fieldSchema)) {
        if (verifiers.isListField(fieldSchema)) {
            nextData = formatFieldDataList_1.formatFieldDataList(type, data, { fieldSchema, schema });
        }
        else {
            nextData = formatFieldData_1.formatFieldData(type, data, { fieldSchema, schema });
        }
    }
    else if (verifiers.isAddressField(fieldSchema)) {
        if (verifiers.isListField(fieldSchema)) {
            if (Array.isArray(nextData)) {
                nextData = R.reject(verifiers.isEmptyAddress, nextData);
            }
        }
        else {
            if (verifiers.isEmptyAddress(nextData)) {
                nextData = null;
            }
        }
    }
    else if (verifiers.isPhoneField(fieldSchema)) {
        if (verifiers.isListField(fieldSchema)) {
            if (Array.isArray(nextData)) {
                nextData = R.reject(verifiers.isEmptyPhone, nextData);
            }
        }
        else {
            if (verifiers.isEmptyPhone(nextData)) {
                nextData = null;
            }
        }
    }
    else if (verifiers.isNumberField(fieldSchema) && !verifiers.isBigInt(fieldSchema)) {
        if (verifiers.isListField(fieldSchema)) {
            if (Array.isArray(nextData)) {
                nextData = R.reject(verifiers.isEmptyNumber, nextData);
                nextData = R.map(Number, nextData);
            }
        }
        else {
            if (verifiers.isEmptyNumber(nextData)) {
                nextData = null;
            }
            else {
                nextData = Number(nextData);
            }
        }
    }
    else if (verifiers.isJSONField(fieldSchema)) {
        if (verifiers.isListField(fieldSchema)) {
            nextData = R.map(formatJSON, nextData);
        }
        else {
            nextData = formatJSON(nextData);
        }
    }
    return nextData;
};
exports.formatFieldDataForMutation = formatFieldDataForMutation;
//# sourceMappingURL=formatFieldDataForMutation.js.map