import { Schema } from '../types';
interface IOptions {
    skip?: boolean | ((...args: any[]) => boolean);
    mutate?: (...args: any[]) => any;
    ignoreNonTableFields?: boolean;
}
interface IFormatDataForMutationMeta {
    tableName: string;
    appName?: string;
    schema: Schema;
}
/**
 * Formats entity data for create or update mutation based on passed schema.
 * @param {MutationType} type - The type of the mutation.
 * @param {string} tableName - The name of the table from the 8base API.
 * @param {Object} data - The entity data for format.
 * @param {Schema} schema - The schema of the used tables from the 8base API.
 */
declare const formatDataForMutation: (type: "CREATE" | "UPDATE", data: any, { tableName, appName, schema }: IFormatDataForMutationMeta, options?: IOptions) => any;
export { formatDataForMutation };
//# sourceMappingURL=formatDataForMutation.d.ts.map