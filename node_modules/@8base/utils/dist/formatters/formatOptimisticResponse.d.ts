import { Schema } from '../types';
interface IOptions {
    skip?: boolean | ((...args: any[]) => boolean);
}
interface IformatOptimisticResponseMeta {
    tableName: string;
    appName?: string;
    schema: Schema;
}
/**
 * Formats entity data for create or update mutation based on passed schema.
 * @param {MutationType} type - The type of the mutation.
 * @param {Object} requestData - The entity data to request.
 * @param {Object} schema - The schema of the used tables from the 8base API.
 */
declare const formatOptimisticResponse: (type: "CREATE" | "UPDATE", { requestData, recordId }: any, { tableName, appName, schema }: IformatOptimisticResponseMeta, options?: IOptions) => {
    [x: string]: string | {
        __typename: string;
        id: any;
    };
    __typename: string;
} | null | undefined;
export { formatOptimisticResponse };
//# sourceMappingURL=formatOptimisticResponse.d.ts.map