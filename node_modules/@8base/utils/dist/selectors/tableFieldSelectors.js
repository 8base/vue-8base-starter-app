"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const R = __importStar(require("ramda"));
const reselect_1 = require("reselect");
const tablesListSelectors = __importStar(require("./tablesListSelectors"));
const tableSelectors = __importStar(require("./tableSelectors"));
const constants_1 = require("../constants");
exports.getTableField = (tableField) => tableField;
exports.getFieldType = reselect_1.createSelector(exports.getTableField, R.propOr('', 'fieldType'));
exports.getFieldTypesAttributes = reselect_1.createSelector(exports.getTableField, R.propOr(null, 'fieldTypeAttributes'));
exports.isRelationField = reselect_1.createSelector(exports.getFieldType, R.equals(constants_1.FIELD_TYPE.RELATION));
exports.isMissingRelationField = reselect_1.createSelector(exports.getFieldType, R.equals(constants_1.FIELD_TYPE.MISSING_RELATION));
exports.isOneWayRelationField = reselect_1.createSelector(exports.getFieldType, R.equals(constants_1.FIELD_TYPE.ONE_WAY_RELATION));
exports.isFileField = reselect_1.createSelector(exports.getFieldType, R.equals(constants_1.FIELD_TYPE.FILE));
exports.isSmartField = reselect_1.createSelector(exports.getFieldType, R.equals(constants_1.FIELD_TYPE.SMART));
exports.isIdField = reselect_1.createSelector(exports.getFieldType, R.equals(constants_1.FIELD_TYPE.ID));
exports.isMetaField = reselect_1.createSelector(exports.getTableField, R.propEq('isMeta', true));
exports.isListField = reselect_1.createSelector(exports.getTableField, R.propEq('isList', true));
exports.isSystemField = reselect_1.createSelector(exports.getTableField, R.propEq('isSystem', true));
exports.getFieldId = reselect_1.createSelector(exports.getTableField, R.propOr('', 'id'));
exports.getFieldName = reselect_1.createSelector(exports.getTableField, fieldSchema => (fieldSchema ? fieldSchema.name : ''));
exports.getFieldDisplayName = reselect_1.createSelector(exports.getTableField, R.propOr('', 'displayName'));
exports.getTableId = reselect_1.createSelector(exports.getTableField, R.path(['table', 'id']));
exports.getTableName = reselect_1.createSelector(exports.getTableField, R.path(['table', 'name']));
exports.getTableDisplayName = reselect_1.createSelector(exports.getTableField, R.path(['table', 'displayName']));
exports.getRelationTableId = reselect_1.createSelector(exports.getTableField, R.path(['relation', 'refTable', 'id']));
exports.getRelationTableName = reselect_1.createSelector(exports.getTableField, R.path(['relation', 'refTable', 'name']));
exports.getRelationTableDisplayName = reselect_1.createSelector(exports.getTableField, R.path(['relation', 'refTable', 'displayName']));
exports.getSchemaFeatures = reselect_1.createSelector(exports.getTableField, R.prop('schemaFeatures'));
exports.getDataFeatures = reselect_1.createSelector(exports.getTableField, R.prop('dataFeatures'));
exports.getFieldKind = reselect_1.createSelector(exports.isSystemField, exports.getRelationTableId, (_, tablesSchema) => tablesSchema, (isSystem, relationTableId, tablesSchema) => {
    let kind = constants_1.FIELD_KINDS.USER;
    if (isSystem) {
        kind = constants_1.FIELD_KINDS.SYSTEM;
    }
    else if (relationTableId) {
        const refTable = tablesListSelectors.getTableById(tablesSchema, relationTableId);
        if (tableSelectors.isSystemTable(refTable)) {
            kind = constants_1.FIELD_KINDS.SYSTEM;
        }
        else if (tableSelectors.isIntegrationTable(refTable)) {
            kind = constants_1.FIELD_KINDS.EXTERNAL;
        }
    }
    return kind;
});
//# sourceMappingURL=tableFieldSelectors.js.map