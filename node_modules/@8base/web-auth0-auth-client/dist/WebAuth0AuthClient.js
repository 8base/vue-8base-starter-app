"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const auth0 = __importStar(require("auth0-js"));
const R = __importStar(require("ramda"));
const utils_1 = require("@8base/utils");
const isEmptyOrNil = R.either(R.isNil, R.isEmpty);
const isEmailVerified = R.pipe(R.pathOr(undefined, ['idTokenPayload', 'email_verified']), R.equals(true));
const getEmail = R.path(['idTokenPayload', 'email']);
const getIdToken = R.path(['idToken']);
const getIdTokenPayload = R.propOr(undefined, 'idTokenPayload');
const getState = R.propOr(undefined, 'state');
/**
 * Creates instacne of the web auth0 auth client.
 */
class WebAuth0AuthClient {
    constructor(options, storage = window.localStorage, storageKey = 'auth') {
        utils_1.throwIfMissingRequiredParameters(['domain', 'clientId', 'redirectUri'], utils_1.PACKAGES.WEB_AUTH0_AUTH_CLIENT, options);
        const { logoutRedirectUri, clientId } = options, restOptions = __rest(options, ["logoutRedirectUri", "clientId"]);
        this.logoutHasCalled = false;
        this.logoutRedirectUri = logoutRedirectUri;
        this.storageAPI = new utils_1.StorageAPI(storage, storageKey);
        this.auth0 = new auth0.WebAuth(Object.assign({ clientID: clientId, responseType: 'token id_token', scope: 'openid email profile' }, restOptions));
    }
    setState(state) {
        this.storageAPI.setState(state);
    }
    getState() {
        return this.storageAPI.getState();
    }
    purgeState() {
        this.storageAPI.purgeState();
    }
    checkIsAuthorized() {
        const { token } = this.getState();
        return R.not(isEmptyOrNil(token));
    }
    authorize(options = {}) {
        if (!this.logoutHasCalled) {
            // @ts-ignore
            this.auth0.authorize(Object.assign({}, options));
        }
    }
    checkSession(options = {}) {
        return new Promise((resolve, reject) => {
            this.auth0.checkSession(options, (error, result) => {
                if (error) {
                    reject(error || {});
                    return;
                }
                resolve({
                    email: getEmail(result),
                    idToken: getIdToken(result),
                    idTokenPayload: getIdTokenPayload(result),
                    isEmailVerified: isEmailVerified(result),
                    state: getState(result),
                });
            });
        });
    }
    changePassword() {
        const { email = '' } = this.getState();
        return new Promise((resolve, reject) => {
            this.auth0.changePassword({
                connection: 'Username-Password-Authentication',
                email,
            }, error => {
                if (error) {
                    reject(error || {});
                    return;
                }
                resolve({ email });
            });
        });
    }
    getAuthorizedData() {
        return new Promise((resolve, reject) => {
            this.auth0.parseHash((error, authResult) => {
                if (error) {
                    reject(error);
                    return;
                }
                resolve({
                    email: getEmail(authResult),
                    idToken: getIdToken(authResult),
                    idTokenPayload: getIdTokenPayload(authResult),
                    isEmailVerified: isEmailVerified(authResult),
                    state: getState(authResult),
                });
            });
        });
    }
    logout(options = {}) {
        window.addEventListener('unload', () => {
            this.purgeState();
        });
        this.logoutHasCalled = true;
        this.auth0.logout(Object.assign({ returnTo: this.logoutRedirectUri }, options));
    }
}
exports.WebAuth0AuthClient = WebAuth0AuthClient;
//# sourceMappingURL=WebAuth0AuthClient.js.map