"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pluralize = require("pluralize");
var _ = require("lodash");
var makeFieldName = function (name) {
    return _.lowerFirst(name);
};
var ignorePrefixNames = [
    "default",
    "system"
];
var processPrefix = function (prefix) {
    return prefix && ignorePrefixNames.some(function (value) { return value === prefix.toLowerCase(); }) ? "" : prefix;
};
var makeTypeName = function (prefix, name) {
    return "" + _.upperFirst(processPrefix(prefix)) + _.upperFirst(name);
};
var SchemaNameGenerator = {
    getTableTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, "" + pluralize.singular(tableName));
    },
    getTableItemFieldName: function (tableName) {
        return makeFieldName(pluralize.singular(tableName));
    },
    getTableListFieldName: function (tableName) {
        return makeFieldName(pluralize.plural(tableName) + "List");
    },
    getTableListResponseTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "ListResponse");
    },
    getTableManyResponseTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "ManyResponse");
    },
    getCreateItemFieldName: function (tableName) {
        return makeFieldName(pluralize.singular(tableName) + "Create");
    },
    getCreateManyItemFieldName: function (tableName) {
        return makeFieldName(pluralize.singular(tableName) + "CreateMany");
    },
    getUpdateItemFieldName: function (tableName) {
        return makeFieldName(pluralize.singular(tableName) + "Update");
    },
    getDeleteItemFieldName: function (tableName) {
        return makeFieldName(pluralize.singular(tableName) + "Delete");
    },
    getSmartTypeFieldName: function (fieldName) {
        return "Smart" + pluralize.singular(_.upperFirst(fieldName.toLowerCase()));
    },
    getSmartTypeFieldNamePredicate: function (fieldName) {
        return SchemaNameGenerator.getSmartTypeFieldName(fieldName) + "Predicate";
    },
    getSmartTypeSortInputTypeName: function (fieldName) {
        return SchemaNameGenerator.getSmartTypeFieldName(fieldName) + "Sort";
    },
    getOrderByInputTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "OrderBy");
    },
    getFilterInputTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "Filter");
    },
    getKeyFilterInputTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "KeyFilter");
    },
    getFieldsPermissionsInputTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "FieldsPermissions");
    },
    getEnumItemTypeName: function (tableName, fieldName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "_" + _.upperFirst(fieldName) + "Enum");
    },
    getSortInputTypeName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "Sort");
    },
    getUpdateInputName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "UpdateInput");
    },
    getDeleteInputName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "DeleteInput");
    },
    getCreateInputName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "CreateInput");
    },
    getCreateManyInputName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "CreateManyInput");
    },
    getRelationCreateInputName: function (tableName, relationFieldName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, _.upperFirst(relationFieldName) + "_" + SchemaNameGenerator.getCreateInputName(tableName, typePrefix));
    },
    getRelationTableFilter: function (relationTableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(relationTableName) + "RelationFilter");
    },
    getSubscriptionFilterName: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "SubscriptionFilter");
    },
    getSubscriptionPayload: function (tableName, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        return makeTypeName(typePrefix, pluralize.singular(tableName) + "Payload");
    },
    getSmartInputType: function (formatName) {
        return SchemaNameGenerator.getSmartTypeFieldName(formatName) + "Input";
    },
    getRelationName: function (tableName, relationFieldName, isUpdateField, typePrefix) {
        if (typePrefix === void 0) { typePrefix = ""; }
        var updateSuffix = (isUpdateField) ? "Update" : "";
        return "" + makeTypeName(typePrefix, tableName) + _.upperFirst(relationFieldName) + updateSuffix + "RelationInput";
    },
};
exports.default = SchemaNameGenerator;
//# sourceMappingURL=SchemaNameGenerator.js.map